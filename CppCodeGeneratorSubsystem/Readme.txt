Постановка задачи
Программа-кодогенератор, создающая файлы с кодом на C++, должна выводить в начале каждого файла список включений (директив #include) и предварительных объявлений (forward declaration) типов, используемых в данном файле. Вам нужно разработать подсистему (включая API), которая формирует этот список на основании информации, полученной от кодогенератора:

Схемы расположения всех доступных типов в заголовочных файлах;
Списка типов, для которых требуется сгенерировать включения;
Списка типов, для которых требуется сгенерировать предварительные объявления.
Подсистема должна возвращать строку, содержащую готовый блок включений и предварительных объявлений.

Требования
Списки типов для включения и предварительного объявления могут содержать некоторые или все доступные типы или быть пустыми.
Если сгенерировано объявление, которое зависит от других типов, эти типы должны быть объявлены (желательно) или включены (если объявление затруднительно) до самого объявления, даже если их изначально не было в соответствующих списках.
Желательно сделать блок включений и объявлений настолько читаемым, насколько возможно - например, добавить сортировку и группировку по пространствам имён. Включения желательно выводить до объявлений и отделять от них пустой строкой. Все строки должны быть оправданы: повторы и объявления типов, определённых в уже включенных заголовочных файлах, могут быть опущены.
Реализация должна быть покрыта unit-тестами (не обязательно полное покрытие, но должны быть показательные тесты для проверки бизнес-логики). Данные о расположении типов в заголовочных файлах задаются в коде теста, парсить код C++ или читать их из внешнего файла не нужно.
Задание тестовое, его основная цель - демонстрация Ваших навыков и опыта, поэтому не требуется привносить лишнего кода (веб интерфейса, работы с базой данных и т. д.).
К решению требуется приложить его краткий обзор на английском языке, описав архитектуру (с обоснованием), ее плюсы и минусы (что можно улучшить или поменять для использования решения в реальных целях).
Язык разработки на Ваш выбор - C# (.Net, NUnit/xUnit) или C++ (STL, Boost, googletest).
Примеры работы подсистемы
Дана схема расположения типов C++ в заголовочных файлах:

Файл <string> содержит определение класса std::string;
Файл "my_class.h" содержит определение класса my_class;
Файл "my_library.h" содержит определения перечислимого типа my_library::enums::enum1 и шаблонной структуры my_library::struct1<T1,T2,T3>;
Файл "typedefs.h" содержит определение типа my_library::callback - псевдонима для указателя на функцию, принимающую один аргумент типа std::string и возвращающую значение типа my_class*.
Eсли требуется сгенерировать включение для перечисления my_library::enums::enum1, результат работы подсистемы будет выглядеть следующим образом:

#include "my_library.h"
Если требуется сгенерировать предварительные объявления для псевдонима my_library::callback и структуры my_library::struct1, блок включений и объявлений выглядит следующим образом:

#include <string>

class my_class;
namespace my_library
{
    using callback = my_class* (*)(std::string);
    tempalate <typename T1, typename T2, typename T3> struct struct1;
}
Здесь предварительное объявление типа my_class добавлено до объявления псевдонима, так как оно использует это имя. По той же причине добавлено включение файла <string>, содержащего определение класса std::string (поскольку предварительные объявления для классов STL имеют проблемы переносимости, для них разумнее генерировать включения).